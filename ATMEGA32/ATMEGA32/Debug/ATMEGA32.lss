
ATMEGA32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000626  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000626  000006ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006c  0080006c  000006c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001b0  00000000  00000000  000006f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000426a  00000000  00000000  000008a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000670  00000000  00000000  00004b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000afb  00000000  00000000  00005180  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000514  00000000  00000000  00005c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007ad  00000000  00000000  00006190  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001352  00000000  00000000  0000693d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  00007c8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__vector_1>
   8:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__vector_2>
   c:	0c 94 1a 02 	jmp	0x434	; 0x434 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e2       	ldi	r30, 0x26	; 38
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 11 03 	jmp	0x622	; 0x622 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
	//MCAL_GPIO_writePin(GPIOx_PORTD, GPIO_PIN_7, GPIO_STATE_LOW);
	//_delay_ms(1000);
//}

int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2d 97       	sbiw	r28, 0x0d	; 13
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	//int0.EXTI_Trigger = EXTI_TRIGGER_FALLING;
	//int0.P_IRQ_CallBack = INT2_IRQ;
	//MCAL_EXTI_Init(&int0);
	
	LCD_Config_t lcd;
	lcd.LCD_ControlPort = LCD_CTRLPORT_A;
  a6:	89 e3       	ldi	r24, 0x39	; 57
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	99 87       	std	Y+9, r25	; 0x09
  ac:	88 87       	std	Y+8, r24	; 0x08
	lcd.LCD_ENPin		= LCD_EN_PIN_0;
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	1b 87       	std	Y+11, r17	; 0x0b
	lcd.LCD_RSPin		= LCD_RS_PIN_1;
  b2:	02 e0       	ldi	r16, 0x02	; 2
  b4:	0a 87       	std	Y+10, r16	; 0x0a
	
	HAL_LCD_Init(&lcd);
  b6:	ce 01       	movw	r24, r28
  b8:	08 96       	adiw	r24, 0x08	; 8
  ba:	0e 94 69 01 	call	0x2d2	; 0x2d2 <HAL_LCD_Init>
	
	
	
	
	USART_Config_t usrt;
	usrt.baudRate			= 51;
  be:	83 e3       	ldi	r24, 0x33	; 51
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	9a 83       	std	Y+2, r25	; 0x02
  c4:	89 83       	std	Y+1, r24	; 0x01
	usrt.characterSize		= USART_CHARSIZE_8;
  c6:	83 e0       	ldi	r24, 0x03	; 3
  c8:	8b 83       	std	Y+3, r24	; 0x03
	usrt.clockPolarity		= USART_PLORITY_FALLING;
  ca:	1c 82       	std	Y+4, r1	; 0x04
	usrt.communicationMode	= USART_MODE_SYNC_MASETER;
  cc:	0d 83       	std	Y+5, r16	; 0x05
	usrt.parityMode			= USART_PARITYMODE_EVEN;
  ce:	0e 83       	std	Y+6, r16	; 0x06
	usrt.stopBit			= USART_STOPBIT_2;
  d0:	1f 83       	std	Y+7, r17	; 0x07
	
	MCAL_USART_Init(&usrt);
  d2:	ce 01       	movw	r24, r28
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <MCAL_USART_Init>
	
	GPIO_PinConfig_t pin;
	pin.GPIO_PinMode = GPIO_MODE_INPUT;
  da:	1d 86       	std	Y+13, r1	; 0x0d
	pin.GPIO_PinNumber = GPIO_PIN_0;
  dc:	1c 87       	std	Y+12, r17	; 0x0c
	
	MCAL_GPIO_Init(GPIOx_PORTB, &pin);
  de:	be 01       	movw	r22, r28
  e0:	64 5f       	subi	r22, 0xF4	; 244
  e2:	7f 4f       	sbci	r23, 0xFF	; 255
  e4:	86 e3       	ldi	r24, 0x36	; 54
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 43 02 	call	0x486	; 0x486 <MCAL_GPIO_Init>
	uint16 data;
	
    while(1)
    {
        //TODO:: Please write your application code
		data = MCAL_USART_receiveData();
  ec:	0e 94 04 03 	call	0x608	; 0x608 <MCAL_USART_receiveData>
		
		HAL_LCD_writeChar(&lcd, data);
  f0:	68 2f       	mov	r22, r24
  f2:	ce 01       	movw	r24, r28
  f4:	08 96       	adiw	r24, 0x08	; 8
  f6:	0e 94 c6 01 	call	0x38c	; 0x38c <HAL_LCD_writeChar>
		HAL_LCD_writeChar(&lcd, data>>8);
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	ce 01       	movw	r24, r28
  fe:	08 96       	adiw	r24, 0x08	; 8
 100:	0e 94 c6 01 	call	0x38c	; 0x38c <HAL_LCD_writeChar>
 104:	f3 cf       	rjmp	.-26     	; 0xec <main+0x5a>

00000106 <LCD_sendCommand>:
 * ================================= Generic Function Definition ==========================
 * ========================================================================================
 */

void LCD_sendCommand(LCD_Config_t *Config, uint8 command)
{
 106:	1f 93       	push	r17
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ec 01       	movw	r28, r24
 10e:	16 2f       	mov	r17, r22
	MCAL_GPIO_writePin(Config->LCD_ControlPort, Config->LCD_RSPin, GPIO_STATE_LOW);
 110:	40 e0       	ldi	r20, 0x00	; 0
 112:	6a 81       	ldd	r22, Y+2	; 0x02
 114:	88 81       	ld	r24, Y
 116:	99 81       	ldd	r25, Y+1	; 0x01
 118:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MCAL_GPIO_writePin>
	
	#if (LCD_MODE == LCD_MODE_4BITS)
	
	MCAL_GPIO_writePin(LCD_DATAPORT, DB4, READBIT(command, 4));
 11c:	14 fb       	bst	r17, 4
 11e:	44 27       	eor	r20, r20
 120:	40 f9       	bld	r20, 0
 122:	60 e1       	ldi	r22, 0x10	; 16
 124:	89 e3       	ldi	r24, 0x39	; 57
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATAPORT, DB5, READBIT(command, 5));
 12c:	15 fb       	bst	r17, 5
 12e:	44 27       	eor	r20, r20
 130:	40 f9       	bld	r20, 0
 132:	60 e2       	ldi	r22, 0x20	; 32
 134:	89 e3       	ldi	r24, 0x39	; 57
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATAPORT, DB6, READBIT(command, 6));
 13c:	16 fb       	bst	r17, 6
 13e:	44 27       	eor	r20, r20
 140:	40 f9       	bld	r20, 0
 142:	60 e4       	ldi	r22, 0x40	; 64
 144:	89 e3       	ldi	r24, 0x39	; 57
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATAPORT, DB7, READBIT(command, 7));
 14c:	41 2f       	mov	r20, r17
 14e:	44 1f       	adc	r20, r20
 150:	44 27       	eor	r20, r20
 152:	44 1f       	adc	r20, r20
 154:	60 e8       	ldi	r22, 0x80	; 128
 156:	89 e3       	ldi	r24, 0x39	; 57
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MCAL_GPIO_writePin>
	
	MCAL_GPIO_writePin(Config->LCD_ControlPort, Config->LCD_ENPin, GPIO_STATE_HIGH);
 15e:	41 e0       	ldi	r20, 0x01	; 1
 160:	6b 81       	ldd	r22, Y+3	; 0x03
 162:	88 81       	ld	r24, Y
 164:	99 81       	ldd	r25, Y+1	; 0x01
 166:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MCAL_GPIO_writePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCD_sendCommand+0x66>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LCD_sendCommand+0x68>
 16e:	00 00       	nop
	_delay_us(EN_DELAY_us);
	MCAL_GPIO_writePin(Config->LCD_ControlPort, Config->LCD_ENPin, GPIO_STATE_LOW);
 170:	40 e0       	ldi	r20, 0x00	; 0
 172:	6b 81       	ldd	r22, Y+3	; 0x03
 174:	88 81       	ld	r24, Y
 176:	99 81       	ldd	r25, Y+1	; 0x01
 178:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MCAL_GPIO_writePin>
	
	MCAL_GPIO_writePin(LCD_DATAPORT, DB4, READBIT(command, 0));
 17c:	41 2f       	mov	r20, r17
 17e:	41 70       	andi	r20, 0x01	; 1
 180:	60 e1       	ldi	r22, 0x10	; 16
 182:	89 e3       	ldi	r24, 0x39	; 57
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATAPORT, DB5, READBIT(command, 1));
 18a:	11 fb       	bst	r17, 1
 18c:	44 27       	eor	r20, r20
 18e:	40 f9       	bld	r20, 0
 190:	60 e2       	ldi	r22, 0x20	; 32
 192:	89 e3       	ldi	r24, 0x39	; 57
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATAPORT, DB6, READBIT(command, 2));
 19a:	12 fb       	bst	r17, 2
 19c:	44 27       	eor	r20, r20
 19e:	40 f9       	bld	r20, 0
 1a0:	60 e4       	ldi	r22, 0x40	; 64
 1a2:	89 e3       	ldi	r24, 0x39	; 57
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATAPORT, DB7, READBIT(command, 3));
 1aa:	13 fb       	bst	r17, 3
 1ac:	44 27       	eor	r20, r20
 1ae:	40 f9       	bld	r20, 0
 1b0:	60 e8       	ldi	r22, 0x80	; 128
 1b2:	89 e3       	ldi	r24, 0x39	; 57
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MCAL_GPIO_writePin>
	
	MCAL_GPIO_writePin(Config->LCD_ControlPort, Config->LCD_ENPin, GPIO_STATE_HIGH);
 1ba:	41 e0       	ldi	r20, 0x01	; 1
 1bc:	6b 81       	ldd	r22, Y+3	; 0x03
 1be:	88 81       	ld	r24, Y
 1c0:	99 81       	ldd	r25, Y+1	; 0x01
 1c2:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MCAL_GPIO_writePin>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <LCD_sendCommand+0xc2>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <LCD_sendCommand+0xc4>
 1ca:	00 00       	nop
	_delay_us(EN_DELAY_us);
	MCAL_GPIO_writePin(Config->LCD_ControlPort, Config->LCD_ENPin, GPIO_STATE_LOW);
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	6b 81       	ldd	r22, Y+3	; 0x03
 1d0:	88 81       	ld	r24, Y
 1d2:	99 81       	ldd	r25, Y+1	; 0x01
 1d4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MCAL_GPIO_writePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d8:	8d ee       	ldi	r24, 0xED	; 237
 1da:	92 e0       	ldi	r25, 0x02	; 2
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LCD_sendCommand+0xd6>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_sendCommand+0xdc>
 1e2:	00 00       	nop
	MCAL_GPIO_writePin(Config->LCD_ControlPort, Config->LCD_ENPin, GPIO_STATE_LOW);
	
	#endif
	
	_delay_ms(3);
}
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	1f 91       	pop	r17
 1ea:	08 95       	ret

000001ec <LCD_sendData>:

void LCD_sendData(LCD_Config_t *Config, uint8 byte)
{
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	ec 01       	movw	r28, r24
 1f4:	16 2f       	mov	r17, r22
	MCAL_GPIO_writePin(Config->LCD_ControlPort, Config->LCD_RSPin, GPIO_STATE_HIGH);
 1f6:	41 e0       	ldi	r20, 0x01	; 1
 1f8:	6a 81       	ldd	r22, Y+2	; 0x02
 1fa:	88 81       	ld	r24, Y
 1fc:	99 81       	ldd	r25, Y+1	; 0x01
 1fe:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MCAL_GPIO_writePin>
	
	#if (LCD_MODE == LCD_MODE_4BITS)
	
	MCAL_GPIO_writePin(LCD_DATAPORT, DB4, READBIT(byte, 4));
 202:	14 fb       	bst	r17, 4
 204:	44 27       	eor	r20, r20
 206:	40 f9       	bld	r20, 0
 208:	60 e1       	ldi	r22, 0x10	; 16
 20a:	89 e3       	ldi	r24, 0x39	; 57
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATAPORT, DB5, READBIT(byte, 5));
 212:	15 fb       	bst	r17, 5
 214:	44 27       	eor	r20, r20
 216:	40 f9       	bld	r20, 0
 218:	60 e2       	ldi	r22, 0x20	; 32
 21a:	89 e3       	ldi	r24, 0x39	; 57
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATAPORT, DB6, READBIT(byte, 6));
 222:	16 fb       	bst	r17, 6
 224:	44 27       	eor	r20, r20
 226:	40 f9       	bld	r20, 0
 228:	60 e4       	ldi	r22, 0x40	; 64
 22a:	89 e3       	ldi	r24, 0x39	; 57
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATAPORT, DB7, READBIT(byte, 7));
 232:	41 2f       	mov	r20, r17
 234:	44 1f       	adc	r20, r20
 236:	44 27       	eor	r20, r20
 238:	44 1f       	adc	r20, r20
 23a:	60 e8       	ldi	r22, 0x80	; 128
 23c:	89 e3       	ldi	r24, 0x39	; 57
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MCAL_GPIO_writePin>
	
	MCAL_GPIO_writePin(Config->LCD_ControlPort, Config->LCD_ENPin, GPIO_STATE_HIGH);
 244:	41 e0       	ldi	r20, 0x01	; 1
 246:	6b 81       	ldd	r22, Y+3	; 0x03
 248:	88 81       	ld	r24, Y
 24a:	99 81       	ldd	r25, Y+1	; 0x01
 24c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MCAL_GPIO_writePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 250:	00 c0       	rjmp	.+0      	; 0x252 <LCD_sendData+0x66>
 252:	00 c0       	rjmp	.+0      	; 0x254 <LCD_sendData+0x68>
 254:	00 00       	nop
	_delay_us(EN_DELAY_us);
	MCAL_GPIO_writePin(Config->LCD_ControlPort, Config->LCD_ENPin, GPIO_STATE_LOW);
 256:	40 e0       	ldi	r20, 0x00	; 0
 258:	6b 81       	ldd	r22, Y+3	; 0x03
 25a:	88 81       	ld	r24, Y
 25c:	99 81       	ldd	r25, Y+1	; 0x01
 25e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MCAL_GPIO_writePin>
	
	MCAL_GPIO_writePin(LCD_DATAPORT, DB4, READBIT(byte, 0));
 262:	41 2f       	mov	r20, r17
 264:	41 70       	andi	r20, 0x01	; 1
 266:	60 e1       	ldi	r22, 0x10	; 16
 268:	89 e3       	ldi	r24, 0x39	; 57
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATAPORT, DB5, READBIT(byte, 1));
 270:	11 fb       	bst	r17, 1
 272:	44 27       	eor	r20, r20
 274:	40 f9       	bld	r20, 0
 276:	60 e2       	ldi	r22, 0x20	; 32
 278:	89 e3       	ldi	r24, 0x39	; 57
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATAPORT, DB6, READBIT(byte, 2));
 280:	12 fb       	bst	r17, 2
 282:	44 27       	eor	r20, r20
 284:	40 f9       	bld	r20, 0
 286:	60 e4       	ldi	r22, 0x40	; 64
 288:	89 e3       	ldi	r24, 0x39	; 57
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATAPORT, DB7, READBIT(byte, 3));
 290:	13 fb       	bst	r17, 3
 292:	44 27       	eor	r20, r20
 294:	40 f9       	bld	r20, 0
 296:	60 e8       	ldi	r22, 0x80	; 128
 298:	89 e3       	ldi	r24, 0x39	; 57
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MCAL_GPIO_writePin>
	
	MCAL_GPIO_writePin(Config->LCD_ControlPort, Config->LCD_ENPin, GPIO_STATE_HIGH);
 2a0:	41 e0       	ldi	r20, 0x01	; 1
 2a2:	6b 81       	ldd	r22, Y+3	; 0x03
 2a4:	88 81       	ld	r24, Y
 2a6:	99 81       	ldd	r25, Y+1	; 0x01
 2a8:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MCAL_GPIO_writePin>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <LCD_sendData+0xc2>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <LCD_sendData+0xc4>
 2b0:	00 00       	nop
	_delay_us(EN_DELAY_us);
	MCAL_GPIO_writePin(Config->LCD_ControlPort, Config->LCD_ENPin, GPIO_STATE_LOW);
 2b2:	40 e0       	ldi	r20, 0x00	; 0
 2b4:	6b 81       	ldd	r22, Y+3	; 0x03
 2b6:	88 81       	ld	r24, Y
 2b8:	99 81       	ldd	r25, Y+1	; 0x01
 2ba:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MCAL_GPIO_writePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2be:	8d ee       	ldi	r24, 0xED	; 237
 2c0:	92 e0       	ldi	r25, 0x02	; 2
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LCD_sendData+0xd6>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <LCD_sendData+0xdc>
 2c8:	00 00       	nop
	MCAL_GPIO_writePin(Config->LCD_ControlPort, Config->LCD_ENPin, GPIO_STATE_LOW);
	
	#endif
	
	_delay_ms(3);
}
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	1f 91       	pop	r17
 2d0:	08 95       	ret

000002d2 <HAL_LCD_Init>:
 * ================================= APIs Function Definition ==========================
 * =====================================================================================
 */

void HAL_LCD_Init(LCD_Config_t *Config)
{
 2d2:	0f 93       	push	r16
 2d4:	1f 93       	push	r17
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	00 d0       	rcall	.+0      	; 0x2dc <HAL_LCD_Init+0xa>
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62
 2e0:	8c 01       	movw	r16, r24
	GPIO_PinConfig_t pin;
	
	pin.GPIO_PinNumber = Config->LCD_ENPin;
 2e2:	fc 01       	movw	r30, r24
 2e4:	83 81       	ldd	r24, Z+3	; 0x03
 2e6:	89 83       	std	Y+1, r24	; 0x01
	pin.GPIO_PinMode = GPIO_MODE_OUTPUT;
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	8a 83       	std	Y+2, r24	; 0x02
	MCAL_GPIO_Init(Config->LCD_ControlPort, &pin);
 2ec:	be 01       	movw	r22, r28
 2ee:	6f 5f       	subi	r22, 0xFF	; 255
 2f0:	7f 4f       	sbci	r23, 0xFF	; 255
 2f2:	80 81       	ld	r24, Z
 2f4:	91 81       	ldd	r25, Z+1	; 0x01
 2f6:	0e 94 43 02 	call	0x486	; 0x486 <MCAL_GPIO_Init>
	
	pin.GPIO_PinNumber = Config->LCD_RSPin;
 2fa:	f8 01       	movw	r30, r16
 2fc:	82 81       	ldd	r24, Z+2	; 0x02
 2fe:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init(Config->LCD_ControlPort, &pin);
 300:	be 01       	movw	r22, r28
 302:	6f 5f       	subi	r22, 0xFF	; 255
 304:	7f 4f       	sbci	r23, 0xFF	; 255
 306:	80 81       	ld	r24, Z
 308:	91 81       	ldd	r25, Z+1	; 0x01
 30a:	0e 94 43 02 	call	0x486	; 0x486 <MCAL_GPIO_Init>
	
	//pin.GPIO_PinNumber = Config-> RW;
	//MCAL_GPIO_Init(LCD_CTRLPORT, &pin);
	
	pin.GPIO_PinNumber = DB4;
 30e:	80 e1       	ldi	r24, 0x10	; 16
 310:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init(LCD_DATAPORT, &pin);
 312:	be 01       	movw	r22, r28
 314:	6f 5f       	subi	r22, 0xFF	; 255
 316:	7f 4f       	sbci	r23, 0xFF	; 255
 318:	89 e3       	ldi	r24, 0x39	; 57
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 43 02 	call	0x486	; 0x486 <MCAL_GPIO_Init>
	
	pin.GPIO_PinNumber = DB5;
 320:	80 e2       	ldi	r24, 0x20	; 32
 322:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init(LCD_DATAPORT, &pin);
 324:	be 01       	movw	r22, r28
 326:	6f 5f       	subi	r22, 0xFF	; 255
 328:	7f 4f       	sbci	r23, 0xFF	; 255
 32a:	89 e3       	ldi	r24, 0x39	; 57
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 43 02 	call	0x486	; 0x486 <MCAL_GPIO_Init>
	
	pin.GPIO_PinNumber = DB6;
 332:	80 e4       	ldi	r24, 0x40	; 64
 334:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init(LCD_DATAPORT, &pin);
 336:	be 01       	movw	r22, r28
 338:	6f 5f       	subi	r22, 0xFF	; 255
 33a:	7f 4f       	sbci	r23, 0xFF	; 255
 33c:	89 e3       	ldi	r24, 0x39	; 57
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 43 02 	call	0x486	; 0x486 <MCAL_GPIO_Init>
	
	pin.GPIO_PinNumber = DB7;
 344:	80 e8       	ldi	r24, 0x80	; 128
 346:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init(LCD_DATAPORT, &pin);
 348:	be 01       	movw	r22, r28
 34a:	6f 5f       	subi	r22, 0xFF	; 255
 34c:	7f 4f       	sbci	r23, 0xFF	; 255
 34e:	89 e3       	ldi	r24, 0x39	; 57
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 43 02 	call	0x486	; 0x486 <MCAL_GPIO_Init>
	pin.GPIO_PinNumber = DB3;
	MCAL_GPIO_Init(LCD_DATAPORT, &pin);

	#elif (LCD_MODE == LCD_MODE_4BITS)
	
	LCD_sendCommand(Config, FUNC_SET>>4);
 356:	62 e0       	ldi	r22, 0x02	; 2
 358:	c8 01       	movw	r24, r16
 35a:	0e 94 83 00 	call	0x106	; 0x106 <LCD_sendCommand>
	#endif
	
	
	
	
	LCD_sendCommand(Config, FUNC_SET);
 35e:	68 e2       	ldi	r22, 0x28	; 40
 360:	c8 01       	movw	r24, r16
 362:	0e 94 83 00 	call	0x106	; 0x106 <LCD_sendCommand>
	LCD_sendCommand(Config, DISPLAY_INIT);
 366:	6e e0       	ldi	r22, 0x0E	; 14
 368:	c8 01       	movw	r24, r16
 36a:	0e 94 83 00 	call	0x106	; 0x106 <LCD_sendCommand>
	LCD_sendCommand(Config, ENTRY_MODE);
 36e:	66 e0       	ldi	r22, 0x06	; 6
 370:	c8 01       	movw	r24, r16
 372:	0e 94 83 00 	call	0x106	; 0x106 <LCD_sendCommand>
	LCD_sendCommand(Config, CLEAR);
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	c8 01       	movw	r24, r16
 37a:	0e 94 83 00 	call	0x106	; 0x106 <LCD_sendCommand>
	
	//_delay_ms(50);
}
 37e:	0f 90       	pop	r0
 380:	0f 90       	pop	r0
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	08 95       	ret

0000038c <HAL_LCD_writeChar>:
	LCD_sendCommand(Config, HOME);
}

void HAL_LCD_writeChar(LCD_Config_t *Config, uint8 data)
{
	LCD_sendData(Config, data);
 38c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <LCD_sendData>

00000390 <__vector_1>:
	Enable_Global_INT();
}


ISR(INT0_vect)
{
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	11 24       	eor	r1, r1
 39a:	2f 93       	push	r18
 39c:	3f 93       	push	r19
 39e:	4f 93       	push	r20
 3a0:	5f 93       	push	r21
 3a2:	6f 93       	push	r22
 3a4:	7f 93       	push	r23
 3a6:	8f 93       	push	r24
 3a8:	9f 93       	push	r25
 3aa:	af 93       	push	r26
 3ac:	bf 93       	push	r27
 3ae:	ef 93       	push	r30
 3b0:	ff 93       	push	r31
	if (NULL != GP_IRQ_CallBack[0])
 3b2:	e0 91 6c 00 	lds	r30, 0x006C
 3b6:	f0 91 6d 00 	lds	r31, 0x006D
 3ba:	30 97       	sbiw	r30, 0x00	; 0
 3bc:	09 f0       	breq	.+2      	; 0x3c0 <__vector_1+0x30>
	{
		GP_IRQ_CallBack[0]();
 3be:	09 95       	icall
	}
}
 3c0:	ff 91       	pop	r31
 3c2:	ef 91       	pop	r30
 3c4:	bf 91       	pop	r27
 3c6:	af 91       	pop	r26
 3c8:	9f 91       	pop	r25
 3ca:	8f 91       	pop	r24
 3cc:	7f 91       	pop	r23
 3ce:	6f 91       	pop	r22
 3d0:	5f 91       	pop	r21
 3d2:	4f 91       	pop	r20
 3d4:	3f 91       	pop	r19
 3d6:	2f 91       	pop	r18
 3d8:	0f 90       	pop	r0
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	0f 90       	pop	r0
 3de:	1f 90       	pop	r1
 3e0:	18 95       	reti

000003e2 <__vector_2>:

ISR(INT1_vect)
{
 3e2:	1f 92       	push	r1
 3e4:	0f 92       	push	r0
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	0f 92       	push	r0
 3ea:	11 24       	eor	r1, r1
 3ec:	2f 93       	push	r18
 3ee:	3f 93       	push	r19
 3f0:	4f 93       	push	r20
 3f2:	5f 93       	push	r21
 3f4:	6f 93       	push	r22
 3f6:	7f 93       	push	r23
 3f8:	8f 93       	push	r24
 3fa:	9f 93       	push	r25
 3fc:	af 93       	push	r26
 3fe:	bf 93       	push	r27
 400:	ef 93       	push	r30
 402:	ff 93       	push	r31
	if (NULL != GP_IRQ_CallBack[1])
 404:	e0 91 6e 00 	lds	r30, 0x006E
 408:	f0 91 6f 00 	lds	r31, 0x006F
 40c:	30 97       	sbiw	r30, 0x00	; 0
 40e:	09 f0       	breq	.+2      	; 0x412 <__vector_2+0x30>
	{
		GP_IRQ_CallBack[1]();
 410:	09 95       	icall
	}
}
 412:	ff 91       	pop	r31
 414:	ef 91       	pop	r30
 416:	bf 91       	pop	r27
 418:	af 91       	pop	r26
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	7f 91       	pop	r23
 420:	6f 91       	pop	r22
 422:	5f 91       	pop	r21
 424:	4f 91       	pop	r20
 426:	3f 91       	pop	r19
 428:	2f 91       	pop	r18
 42a:	0f 90       	pop	r0
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	0f 90       	pop	r0
 430:	1f 90       	pop	r1
 432:	18 95       	reti

00000434 <__vector_3>:

ISR(INT2_vect)
{
 434:	1f 92       	push	r1
 436:	0f 92       	push	r0
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	0f 92       	push	r0
 43c:	11 24       	eor	r1, r1
 43e:	2f 93       	push	r18
 440:	3f 93       	push	r19
 442:	4f 93       	push	r20
 444:	5f 93       	push	r21
 446:	6f 93       	push	r22
 448:	7f 93       	push	r23
 44a:	8f 93       	push	r24
 44c:	9f 93       	push	r25
 44e:	af 93       	push	r26
 450:	bf 93       	push	r27
 452:	ef 93       	push	r30
 454:	ff 93       	push	r31
	if (NULL != GP_IRQ_CallBack[2])
 456:	e0 91 70 00 	lds	r30, 0x0070
 45a:	f0 91 71 00 	lds	r31, 0x0071
 45e:	30 97       	sbiw	r30, 0x00	; 0
 460:	09 f0       	breq	.+2      	; 0x464 <__vector_3+0x30>
	{
		GP_IRQ_CallBack[2]();
 462:	09 95       	icall
	}
}
 464:	ff 91       	pop	r31
 466:	ef 91       	pop	r30
 468:	bf 91       	pop	r27
 46a:	af 91       	pop	r26
 46c:	9f 91       	pop	r25
 46e:	8f 91       	pop	r24
 470:	7f 91       	pop	r23
 472:	6f 91       	pop	r22
 474:	5f 91       	pop	r21
 476:	4f 91       	pop	r20
 478:	3f 91       	pop	r19
 47a:	2f 91       	pop	r18
 47c:	0f 90       	pop	r0
 47e:	0f be       	out	0x3f, r0	; 63
 480:	0f 90       	pop	r0
 482:	1f 90       	pop	r1
 484:	18 95       	reti

00000486 <MCAL_GPIO_Init>:
* Note				- None.
*/

void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
	switch(PinConfig->GPIO_PinMode)
 486:	fb 01       	movw	r30, r22
 488:	21 81       	ldd	r18, Z+1	; 0x01
 48a:	21 30       	cpi	r18, 0x01	; 1
 48c:	e1 f0       	breq	.+56     	; 0x4c6 <MCAL_GPIO_Init+0x40>
 48e:	90 f0       	brcs	.+36     	; 0x4b4 <MCAL_GPIO_Init+0x2e>
 490:	22 30       	cpi	r18, 0x02	; 2
 492:	79 f4       	brne	.+30     	; 0x4b2 <MCAL_GPIO_Init+0x2c>
		case GPIO_MODE_OUTPUT:
		GPIOx->DDRx |= PinConfig->GPIO_PinNumber;
		break;
		
		case GPIO_MODE_INPUT_PUR:
		GPIOx->DDRx &= ~(PinConfig->GPIO_PinNumber);
 494:	fc 01       	movw	r30, r24
 496:	31 81       	ldd	r19, Z+1	; 0x01
 498:	fb 01       	movw	r30, r22
 49a:	20 81       	ld	r18, Z
 49c:	20 95       	com	r18
 49e:	23 23       	and	r18, r19
 4a0:	fc 01       	movw	r30, r24
 4a2:	21 83       	std	Z+1, r18	; 0x01
		GPIOx->PORTx |= PinConfig->GPIO_PinNumber;
 4a4:	22 81       	ldd	r18, Z+2	; 0x02
 4a6:	fb 01       	movw	r30, r22
 4a8:	30 81       	ld	r19, Z
 4aa:	23 2b       	or	r18, r19
 4ac:	fc 01       	movw	r30, r24
 4ae:	22 83       	std	Z+2, r18	; 0x02
 4b0:	08 95       	ret
 4b2:	08 95       	ret
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
	switch(PinConfig->GPIO_PinMode)
	{
		case GPIO_MODE_INPUT:
		GPIOx->DDRx &= ~(PinConfig->GPIO_PinNumber);
 4b4:	fc 01       	movw	r30, r24
 4b6:	31 81       	ldd	r19, Z+1	; 0x01
 4b8:	fb 01       	movw	r30, r22
 4ba:	20 81       	ld	r18, Z
 4bc:	20 95       	com	r18
 4be:	23 23       	and	r18, r19
 4c0:	fc 01       	movw	r30, r24
 4c2:	21 83       	std	Z+1, r18	; 0x01
		break;
 4c4:	08 95       	ret
		
		case GPIO_MODE_OUTPUT:
		GPIOx->DDRx |= PinConfig->GPIO_PinNumber;
 4c6:	fc 01       	movw	r30, r24
 4c8:	21 81       	ldd	r18, Z+1	; 0x01
 4ca:	fb 01       	movw	r30, r22
 4cc:	30 81       	ld	r19, Z
 4ce:	23 2b       	or	r18, r19
 4d0:	fc 01       	movw	r30, r24
 4d2:	21 83       	std	Z+1, r18	; 0x01
		break;
 4d4:	08 95       	ret

000004d6 <MCAL_GPIO_writePin>:
* @retval 			- None.
* Note				- None.
*/
void MCAL_GPIO_writePin(GPIO_TypeDef *GPIOx, uint8 PinNumber, uint8 value)
{
	switch(value)
 4d6:	44 23       	and	r20, r20
 4d8:	41 f0       	breq	.+16     	; 0x4ea <MCAL_GPIO_writePin+0x14>
 4da:	41 30       	cpi	r20, 0x01	; 1
 4dc:	29 f4       	brne	.+10     	; 0x4e8 <MCAL_GPIO_writePin+0x12>
		case GPIO_STATE_LOW:
		GPIOx->PORTx &= ~(PinNumber);
		break;
		
		case GPIO_STATE_HIGH:
		GPIOx->PORTx |= PinNumber;
 4de:	fc 01       	movw	r30, r24
 4e0:	22 81       	ldd	r18, Z+2	; 0x02
 4e2:	26 2b       	or	r18, r22
 4e4:	22 83       	std	Z+2, r18	; 0x02
 4e6:	08 95       	ret
 4e8:	08 95       	ret
void MCAL_GPIO_writePin(GPIO_TypeDef *GPIOx, uint8 PinNumber, uint8 value)
{
	switch(value)
	{
		case GPIO_STATE_LOW:
		GPIOx->PORTx &= ~(PinNumber);
 4ea:	fc 01       	movw	r30, r24
 4ec:	22 81       	ldd	r18, Z+2	; 0x02
 4ee:	60 95       	com	r22
 4f0:	62 23       	and	r22, r18
 4f2:	62 83       	std	Z+2, r22	; 0x02
		break;
 4f4:	08 95       	ret

000004f6 <MCAL_USART_Init>:
* @param [in] 		- config: This carries the configuration for USART.
* @retval 			- None.
* Note				- None.
*/
void MCAL_USART_Init(USART_Config_t *config)
{
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29
 4fa:	dc 01       	movw	r26, r24
	// Set Baud Rate.
	*GPtr2UBRRL				= (uint8)config->baudRate;
 4fc:	e0 91 6a 00 	lds	r30, 0x006A
 500:	f0 91 6b 00 	lds	r31, 0x006B
 504:	8c 91       	ld	r24, X
 506:	80 83       	st	Z, r24
	GPtr2UBRRH->bit._URSEL	= 0;
 508:	e0 91 62 00 	lds	r30, 0x0062
 50c:	f0 91 63 00 	lds	r31, 0x0063
 510:	80 81       	ld	r24, Z
 512:	8f 77       	andi	r24, 0x7F	; 127
 514:	80 83       	st	Z, r24
	GPtr2UBRRH->bit._UBRR	= ((config->baudRate >> 8));
 516:	11 96       	adiw	r26, 0x01	; 1
 518:	9c 91       	ld	r25, X
 51a:	11 97       	sbiw	r26, 0x01	; 1
 51c:	9f 70       	andi	r25, 0x0F	; 15
 51e:	80 81       	ld	r24, Z
 520:	80 7f       	andi	r24, 0xF0	; 240
 522:	89 2b       	or	r24, r25
 524:	80 83       	st	Z, r24
	
	// Set Character Size.
	GPtr2UCSRC->bit._URSEL = 1;
 526:	e0 91 60 00 	lds	r30, 0x0060
 52a:	f0 91 61 00 	lds	r31, 0x0061
 52e:	80 81       	ld	r24, Z
 530:	80 68       	ori	r24, 0x80	; 128
 532:	80 83       	st	Z, r24
	GPtr2UCSRC->bit._UCSZx = config->characterSize;
 534:	12 96       	adiw	r26, 0x02	; 2
 536:	9c 91       	ld	r25, X
 538:	12 97       	sbiw	r26, 0x02	; 2
 53a:	93 70       	andi	r25, 0x03	; 3
 53c:	99 0f       	add	r25, r25
 53e:	80 81       	ld	r24, Z
 540:	89 7f       	andi	r24, 0xF9	; 249
 542:	89 2b       	or	r24, r25
 544:	80 83       	st	Z, r24
	GPtr2UCSRB->bit._UCSZ2 = config->characterSize >> 2;
 546:	40 91 68 00 	lds	r20, 0x0068
 54a:	50 91 69 00 	lds	r21, 0x0069
 54e:	12 96       	adiw	r26, 0x02	; 2
 550:	9c 91       	ld	r25, X
 552:	12 97       	sbiw	r26, 0x02	; 2
 554:	92 fb       	bst	r25, 2
 556:	99 27       	eor	r25, r25
 558:	90 f9       	bld	r25, 0
 55a:	ea 01       	movw	r28, r20
 55c:	88 81       	ld	r24, Y
 55e:	90 fb       	bst	r25, 0
 560:	82 f9       	bld	r24, 2
 562:	88 83       	st	Y, r24
	
	// Communication Mode.
	GPtr2UCSRC->bit._URSEL = 1;
 564:	80 81       	ld	r24, Z
 566:	80 68       	ori	r24, 0x80	; 128
 568:	80 83       	st	Z, r24
	GPtr2UCSRC->bit._UMSEL = config->communicationMode >> 1;
 56a:	14 96       	adiw	r26, 0x04	; 4
 56c:	9c 91       	ld	r25, X
 56e:	14 97       	sbiw	r26, 0x04	; 4
 570:	96 95       	lsr	r25
 572:	91 70       	andi	r25, 0x01	; 1
 574:	80 81       	ld	r24, Z
 576:	90 fb       	bst	r25, 0
 578:	86 f9       	bld	r24, 6
 57a:	80 83       	st	Z, r24
	
	switch (config->communicationMode)
 57c:	14 96       	adiw	r26, 0x04	; 4
 57e:	8c 91       	ld	r24, X
 580:	14 97       	sbiw	r26, 0x04	; 4
 582:	81 30       	cpi	r24, 0x01	; 1
 584:	c1 f1       	breq	.+112    	; 0x5f6 <MCAL_USART_Init+0x100>
 586:	70 f1       	brcs	.+92     	; 0x5e4 <MCAL_USART_Init+0xee>
 588:	82 30       	cpi	r24, 0x02	; 2
 58a:	79 f4       	brne	.+30     	; 0x5aa <MCAL_USART_Init+0xb4>
		case USART_MODE_ASYNC_DOUBLE:
		GPtr2UCSRA->bit._U2X = 1;
			break;
		
		case USART_MODE_SYNC_MASETER:
		GPtr2UCSRA->bit._U2X = 0;
 58c:	80 91 66 00 	lds	r24, 0x0066
 590:	90 91 67 00 	lds	r25, 0x0067
 594:	ec 01       	movw	r28, r24
 596:	28 81       	ld	r18, Y
 598:	2d 7f       	andi	r18, 0xFD	; 253
 59a:	28 83       	st	Y, r18
		
		// clock polarity.
		GPtr2UCSRC->bit._UCPOL = config->clockPolarity;
 59c:	13 96       	adiw	r26, 0x03	; 3
 59e:	9c 91       	ld	r25, X
 5a0:	13 97       	sbiw	r26, 0x03	; 3
 5a2:	80 81       	ld	r24, Z
 5a4:	90 fb       	bst	r25, 0
 5a6:	80 f9       	bld	r24, 0
 5a8:	80 83       	st	Z, r24
		break;
	}
	
	// Parity Mode.
	GPtr2UCSRC->bit._URSEL	= 1;
 5aa:	80 81       	ld	r24, Z
 5ac:	80 68       	ori	r24, 0x80	; 128
 5ae:	80 83       	st	Z, r24
	GPtr2UCSRC->bit._UBMx	= config->parityMode;
 5b0:	15 96       	adiw	r26, 0x05	; 5
 5b2:	9c 91       	ld	r25, X
 5b4:	15 97       	sbiw	r26, 0x05	; 5
 5b6:	93 70       	andi	r25, 0x03	; 3
 5b8:	92 95       	swap	r25
 5ba:	90 7f       	andi	r25, 0xF0	; 240
 5bc:	80 81       	ld	r24, Z
 5be:	8f 7c       	andi	r24, 0xCF	; 207
 5c0:	89 2b       	or	r24, r25
 5c2:	80 83       	st	Z, r24
	
	// Stop Bit.
	GPtr2UCSRC->bit._USBS = config->stopBit;
 5c4:	16 96       	adiw	r26, 0x06	; 6
 5c6:	9c 91       	ld	r25, X
 5c8:	80 81       	ld	r24, Z
 5ca:	90 fb       	bst	r25, 0
 5cc:	83 f9       	bld	r24, 3
 5ce:	80 83       	st	Z, r24
	
	
	// Enable Tx & Rx.
	GPtr2UCSRB->bit._TXEN = 1;
 5d0:	fa 01       	movw	r30, r20
 5d2:	80 81       	ld	r24, Z
 5d4:	88 60       	ori	r24, 0x08	; 8
 5d6:	80 83       	st	Z, r24
	GPtr2UCSRB->bit._RXEN = 1;
 5d8:	80 81       	ld	r24, Z
 5da:	80 61       	ori	r24, 0x10	; 16
 5dc:	80 83       	st	Z, r24
	
	
}
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	08 95       	ret
	GPtr2UCSRC->bit._UMSEL = config->communicationMode >> 1;
	
	switch (config->communicationMode)
	{
		case USART_MODE_ASYNC_NORMAL:
		GPtr2UCSRA->bit._U2X = 0;
 5e4:	80 91 66 00 	lds	r24, 0x0066
 5e8:	90 91 67 00 	lds	r25, 0x0067
 5ec:	ec 01       	movw	r28, r24
 5ee:	28 81       	ld	r18, Y
 5f0:	2d 7f       	andi	r18, 0xFD	; 253
 5f2:	28 83       	st	Y, r18
			break;
 5f4:	da cf       	rjmp	.-76     	; 0x5aa <MCAL_USART_Init+0xb4>
		
		case USART_MODE_ASYNC_DOUBLE:
		GPtr2UCSRA->bit._U2X = 1;
 5f6:	80 91 66 00 	lds	r24, 0x0066
 5fa:	90 91 67 00 	lds	r25, 0x0067
 5fe:	ec 01       	movw	r28, r24
 600:	28 81       	ld	r18, Y
 602:	22 60       	ori	r18, 0x02	; 2
 604:	28 83       	st	Y, r18
			break;
 606:	d1 cf       	rjmp	.-94     	; 0x5aa <MCAL_USART_Init+0xb4>

00000608 <MCAL_USART_receiveData>:
	*GPtr2UDR = TxBuffer;
}


uint8 MCAL_USART_receiveData(void)
{
 608:	e0 91 66 00 	lds	r30, 0x0066
 60c:	f0 91 67 00 	lds	r31, 0x0067
	while (!GPtr2UCSRA->bit._RXC);
 610:	80 81       	ld	r24, Z
 612:	87 ff       	sbrs	r24, 7
 614:	fd cf       	rjmp	.-6      	; 0x610 <MCAL_USART_receiveData+0x8>
	
	return *GPtr2UDR;
 616:	e0 91 64 00 	lds	r30, 0x0064
 61a:	f0 91 65 00 	lds	r31, 0x0065
}
 61e:	80 81       	ld	r24, Z
 620:	08 95       	ret

00000622 <_exit>:
 622:	f8 94       	cli

00000624 <__stop_program>:
 624:	ff cf       	rjmp	.-2      	; 0x624 <__stop_program>
