
ATMEGA32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000004e2  00000576  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00000578  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003d51  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053f  00000000  00000000  00004471  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009cb  00000000  00000000  000049b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d4  00000000  00000000  0000537c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005c4  00000000  00000000  00005750  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010dc  00000000  00000000  00005d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  00006df0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ee       	ldi	r30, 0xE2	; 226
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 6f 02 	jmp	0x4de	; 0x4de <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define SLAVE	0

#define MCU     SLAVE

int main(void)
{		
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2b 97       	sbiw	r28, 0x0b	; 11
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	SPI_Config_t mySPI;
	mySPI.SPI_DataOrder = SPI_DATA_ORDER_LSB;
  a6:	80 e2       	ldi	r24, 0x20	; 32
  a8:	8a 83       	std	Y+2, r24	; 0x02
	mySPI.SPI_ClockPolarityPhase = SPI_CLOCK_POLARITY_PHASE_HIGH_FIRST;
  aa:	88 e0       	ldi	r24, 0x08	; 8
  ac:	8b 83       	std	Y+3, r24	; 0x03
	mySPI.SPI_ClockRate = SPI_CLOCK_RATE_DIV_2;
  ae:	84 e0       	ldi	r24, 0x04	; 4
  b0:	8c 83       	std	Y+4, r24	; 0x04
	mySPI.SPI_INT_EN = SPI_INT_DISABLE;
  b2:	1d 82       	std	Y+5, r1	; 0x05
	
	#endif
	
	#if (MCU == SLAVE)
	
	mySPI.SPI_MasterSlaveSelect = SPI_MCU_MODE_SLAVE;
  b4:	19 82       	std	Y+1, r1	; 0x01
	
	LCD_Config_t myLCD;
	myLCD.LCD_ControlPort = GPIOx_PORTC;
  b6:	83 e3       	ldi	r24, 0x33	; 51
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	99 87       	std	Y+9, r25	; 0x09
  bc:	88 87       	std	Y+8, r24	; 0x08
	myLCD.LCD_ENPin = LCD_EN_PIN_1;
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	8b 87       	std	Y+11, r24	; 0x0b
	myLCD.LCD_RSPin = LCD_RS_PIN_0;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	8a 87       	std	Y+10, r24	; 0x0a
	HAL_LCD_Init(&myLCD);
  c6:	ce 01       	movw	r24, r28
  c8:	08 96       	adiw	r24, 0x08	; 8
  ca:	0e 94 59 01 	call	0x2b2	; 0x2b2 <HAL_LCD_Init>
	
	#endif
	
	MCAL_SPI_Init(&mySPI);
  ce:	ce 01       	movw	r24, r28
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <MCAL_SPI_Init>
		#endif
		
		
		#if (MCU == SLAVE)
		
		HAL_LCD_writeChar(&myLCD, MCAL_SPI_Rx());
  d6:	0e 94 66 02 	call	0x4cc	; 0x4cc <MCAL_SPI_Rx>
  da:	68 2f       	mov	r22, r24
  dc:	ce 01       	movw	r24, r28
  de:	08 96       	adiw	r24, 0x08	; 8
  e0:	0e 94 b6 01 	call	0x36c	; 0x36c <HAL_LCD_writeChar>
  e4:	f8 cf       	rjmp	.-16     	; 0xd6 <main+0x44>

000000e6 <LCD_sendCommand>:
 * ================================= Generic Function Definition ==========================
 * ========================================================================================
 */

void LCD_sendCommand(LCD_Config_t *Config, uint8 command)
{
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	ec 01       	movw	r28, r24
  ee:	16 2f       	mov	r17, r22
	MCAL_GPIO_writePin(Config->LCD_ControlPort, Config->LCD_RSPin, GPIO_STATE_LOW);
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	6a 81       	ldd	r22, Y+2	; 0x02
  f4:	88 81       	ld	r24, Y
  f6:	99 81       	ldd	r25, Y+1	; 0x01
  f8:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCAL_GPIO_writePin>
	
	#if (LCD_MODE == LCD_MODE_4BITS)
	
	MCAL_GPIO_writePin(LCD_DATAPORT, DB4, READBIT(command, 4));
  fc:	14 fb       	bst	r17, 4
  fe:	44 27       	eor	r20, r20
 100:	40 f9       	bld	r20, 0
 102:	60 e1       	ldi	r22, 0x10	; 16
 104:	83 e3       	ldi	r24, 0x33	; 51
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATAPORT, DB5, READBIT(command, 5));
 10c:	15 fb       	bst	r17, 5
 10e:	44 27       	eor	r20, r20
 110:	40 f9       	bld	r20, 0
 112:	60 e2       	ldi	r22, 0x20	; 32
 114:	83 e3       	ldi	r24, 0x33	; 51
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATAPORT, DB6, READBIT(command, 6));
 11c:	16 fb       	bst	r17, 6
 11e:	44 27       	eor	r20, r20
 120:	40 f9       	bld	r20, 0
 122:	60 e4       	ldi	r22, 0x40	; 64
 124:	83 e3       	ldi	r24, 0x33	; 51
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATAPORT, DB7, READBIT(command, 7));
 12c:	41 2f       	mov	r20, r17
 12e:	44 1f       	adc	r20, r20
 130:	44 27       	eor	r20, r20
 132:	44 1f       	adc	r20, r20
 134:	60 e8       	ldi	r22, 0x80	; 128
 136:	83 e3       	ldi	r24, 0x33	; 51
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCAL_GPIO_writePin>
	
	MCAL_GPIO_writePin(Config->LCD_ControlPort, Config->LCD_ENPin, GPIO_STATE_HIGH);
 13e:	41 e0       	ldi	r20, 0x01	; 1
 140:	6b 81       	ldd	r22, Y+3	; 0x03
 142:	88 81       	ld	r24, Y
 144:	99 81       	ldd	r25, Y+1	; 0x01
 146:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCAL_GPIO_writePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCD_sendCommand+0x66>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <LCD_sendCommand+0x68>
 14e:	00 00       	nop
	_delay_us(EN_DELAY_us);
	MCAL_GPIO_writePin(Config->LCD_ControlPort, Config->LCD_ENPin, GPIO_STATE_LOW);
 150:	40 e0       	ldi	r20, 0x00	; 0
 152:	6b 81       	ldd	r22, Y+3	; 0x03
 154:	88 81       	ld	r24, Y
 156:	99 81       	ldd	r25, Y+1	; 0x01
 158:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCAL_GPIO_writePin>
	
	MCAL_GPIO_writePin(LCD_DATAPORT, DB4, READBIT(command, 0));
 15c:	41 2f       	mov	r20, r17
 15e:	41 70       	andi	r20, 0x01	; 1
 160:	60 e1       	ldi	r22, 0x10	; 16
 162:	83 e3       	ldi	r24, 0x33	; 51
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATAPORT, DB5, READBIT(command, 1));
 16a:	11 fb       	bst	r17, 1
 16c:	44 27       	eor	r20, r20
 16e:	40 f9       	bld	r20, 0
 170:	60 e2       	ldi	r22, 0x20	; 32
 172:	83 e3       	ldi	r24, 0x33	; 51
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATAPORT, DB6, READBIT(command, 2));
 17a:	12 fb       	bst	r17, 2
 17c:	44 27       	eor	r20, r20
 17e:	40 f9       	bld	r20, 0
 180:	60 e4       	ldi	r22, 0x40	; 64
 182:	83 e3       	ldi	r24, 0x33	; 51
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATAPORT, DB7, READBIT(command, 3));
 18a:	13 fb       	bst	r17, 3
 18c:	44 27       	eor	r20, r20
 18e:	40 f9       	bld	r20, 0
 190:	60 e8       	ldi	r22, 0x80	; 128
 192:	83 e3       	ldi	r24, 0x33	; 51
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCAL_GPIO_writePin>
	
	MCAL_GPIO_writePin(Config->LCD_ControlPort, Config->LCD_ENPin, GPIO_STATE_HIGH);
 19a:	41 e0       	ldi	r20, 0x01	; 1
 19c:	6b 81       	ldd	r22, Y+3	; 0x03
 19e:	88 81       	ld	r24, Y
 1a0:	99 81       	ldd	r25, Y+1	; 0x01
 1a2:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCAL_GPIO_writePin>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <LCD_sendCommand+0xc2>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <LCD_sendCommand+0xc4>
 1aa:	00 00       	nop
	_delay_us(EN_DELAY_us);
	MCAL_GPIO_writePin(Config->LCD_ControlPort, Config->LCD_ENPin, GPIO_STATE_LOW);
 1ac:	40 e0       	ldi	r20, 0x00	; 0
 1ae:	6b 81       	ldd	r22, Y+3	; 0x03
 1b0:	88 81       	ld	r24, Y
 1b2:	99 81       	ldd	r25, Y+1	; 0x01
 1b4:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCAL_GPIO_writePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	8d ee       	ldi	r24, 0xED	; 237
 1ba:	92 e0       	ldi	r25, 0x02	; 2
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_sendCommand+0xd6>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_sendCommand+0xdc>
 1c2:	00 00       	nop
	MCAL_GPIO_writePin(Config->LCD_ControlPort, Config->LCD_ENPin, GPIO_STATE_LOW);
	
	#endif
	
	_delay_ms(3);
}
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	08 95       	ret

000001cc <LCD_sendData>:

void LCD_sendData(LCD_Config_t *Config, uint8 byte)
{
 1cc:	1f 93       	push	r17
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	ec 01       	movw	r28, r24
 1d4:	16 2f       	mov	r17, r22
	MCAL_GPIO_writePin(Config->LCD_ControlPort, Config->LCD_RSPin, GPIO_STATE_HIGH);
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	6a 81       	ldd	r22, Y+2	; 0x02
 1da:	88 81       	ld	r24, Y
 1dc:	99 81       	ldd	r25, Y+1	; 0x01
 1de:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCAL_GPIO_writePin>
	
	#if (LCD_MODE == LCD_MODE_4BITS)
	
	MCAL_GPIO_writePin(LCD_DATAPORT, DB4, READBIT(byte, 4));
 1e2:	14 fb       	bst	r17, 4
 1e4:	44 27       	eor	r20, r20
 1e6:	40 f9       	bld	r20, 0
 1e8:	60 e1       	ldi	r22, 0x10	; 16
 1ea:	83 e3       	ldi	r24, 0x33	; 51
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATAPORT, DB5, READBIT(byte, 5));
 1f2:	15 fb       	bst	r17, 5
 1f4:	44 27       	eor	r20, r20
 1f6:	40 f9       	bld	r20, 0
 1f8:	60 e2       	ldi	r22, 0x20	; 32
 1fa:	83 e3       	ldi	r24, 0x33	; 51
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATAPORT, DB6, READBIT(byte, 6));
 202:	16 fb       	bst	r17, 6
 204:	44 27       	eor	r20, r20
 206:	40 f9       	bld	r20, 0
 208:	60 e4       	ldi	r22, 0x40	; 64
 20a:	83 e3       	ldi	r24, 0x33	; 51
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATAPORT, DB7, READBIT(byte, 7));
 212:	41 2f       	mov	r20, r17
 214:	44 1f       	adc	r20, r20
 216:	44 27       	eor	r20, r20
 218:	44 1f       	adc	r20, r20
 21a:	60 e8       	ldi	r22, 0x80	; 128
 21c:	83 e3       	ldi	r24, 0x33	; 51
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCAL_GPIO_writePin>
	
	MCAL_GPIO_writePin(Config->LCD_ControlPort, Config->LCD_ENPin, GPIO_STATE_HIGH);
 224:	41 e0       	ldi	r20, 0x01	; 1
 226:	6b 81       	ldd	r22, Y+3	; 0x03
 228:	88 81       	ld	r24, Y
 22a:	99 81       	ldd	r25, Y+1	; 0x01
 22c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCAL_GPIO_writePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 230:	00 c0       	rjmp	.+0      	; 0x232 <LCD_sendData+0x66>
 232:	00 c0       	rjmp	.+0      	; 0x234 <LCD_sendData+0x68>
 234:	00 00       	nop
	_delay_us(EN_DELAY_us);
	MCAL_GPIO_writePin(Config->LCD_ControlPort, Config->LCD_ENPin, GPIO_STATE_LOW);
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	6b 81       	ldd	r22, Y+3	; 0x03
 23a:	88 81       	ld	r24, Y
 23c:	99 81       	ldd	r25, Y+1	; 0x01
 23e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCAL_GPIO_writePin>
	
	MCAL_GPIO_writePin(LCD_DATAPORT, DB4, READBIT(byte, 0));
 242:	41 2f       	mov	r20, r17
 244:	41 70       	andi	r20, 0x01	; 1
 246:	60 e1       	ldi	r22, 0x10	; 16
 248:	83 e3       	ldi	r24, 0x33	; 51
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATAPORT, DB5, READBIT(byte, 1));
 250:	11 fb       	bst	r17, 1
 252:	44 27       	eor	r20, r20
 254:	40 f9       	bld	r20, 0
 256:	60 e2       	ldi	r22, 0x20	; 32
 258:	83 e3       	ldi	r24, 0x33	; 51
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATAPORT, DB6, READBIT(byte, 2));
 260:	12 fb       	bst	r17, 2
 262:	44 27       	eor	r20, r20
 264:	40 f9       	bld	r20, 0
 266:	60 e4       	ldi	r22, 0x40	; 64
 268:	83 e3       	ldi	r24, 0x33	; 51
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATAPORT, DB7, READBIT(byte, 3));
 270:	13 fb       	bst	r17, 3
 272:	44 27       	eor	r20, r20
 274:	40 f9       	bld	r20, 0
 276:	60 e8       	ldi	r22, 0x80	; 128
 278:	83 e3       	ldi	r24, 0x33	; 51
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCAL_GPIO_writePin>
	
	MCAL_GPIO_writePin(Config->LCD_ControlPort, Config->LCD_ENPin, GPIO_STATE_HIGH);
 280:	41 e0       	ldi	r20, 0x01	; 1
 282:	6b 81       	ldd	r22, Y+3	; 0x03
 284:	88 81       	ld	r24, Y
 286:	99 81       	ldd	r25, Y+1	; 0x01
 288:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCAL_GPIO_writePin>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <LCD_sendData+0xc2>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <LCD_sendData+0xc4>
 290:	00 00       	nop
	_delay_us(EN_DELAY_us);
	MCAL_GPIO_writePin(Config->LCD_ControlPort, Config->LCD_ENPin, GPIO_STATE_LOW);
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	6b 81       	ldd	r22, Y+3	; 0x03
 296:	88 81       	ld	r24, Y
 298:	99 81       	ldd	r25, Y+1	; 0x01
 29a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCAL_GPIO_writePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29e:	8d ee       	ldi	r24, 0xED	; 237
 2a0:	92 e0       	ldi	r25, 0x02	; 2
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCD_sendData+0xd6>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <LCD_sendData+0xdc>
 2a8:	00 00       	nop
	MCAL_GPIO_writePin(Config->LCD_ControlPort, Config->LCD_ENPin, GPIO_STATE_LOW);
	
	#endif
	
	_delay_ms(3);
}
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	1f 91       	pop	r17
 2b0:	08 95       	ret

000002b2 <HAL_LCD_Init>:
 * ================================= APIs Function Definition ==========================
 * =====================================================================================
 */

void HAL_LCD_Init(LCD_Config_t *Config)
{
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	00 d0       	rcall	.+0      	; 0x2bc <HAL_LCD_Init+0xa>
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62
 2c0:	8c 01       	movw	r16, r24
	GPIO_PinConfig_t pin;
	
	pin.GPIO_PinNumber = Config->LCD_ENPin;
 2c2:	fc 01       	movw	r30, r24
 2c4:	83 81       	ldd	r24, Z+3	; 0x03
 2c6:	89 83       	std	Y+1, r24	; 0x01
	pin.GPIO_PinMode = GPIO_MODE_OUTPUT;
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	8a 83       	std	Y+2, r24	; 0x02
	MCAL_GPIO_Init(Config->LCD_ControlPort, &pin);
 2cc:	be 01       	movw	r22, r28
 2ce:	6f 5f       	subi	r22, 0xFF	; 255
 2d0:	7f 4f       	sbci	r23, 0xFF	; 255
 2d2:	80 81       	ld	r24, Z
 2d4:	91 81       	ldd	r25, Z+1	; 0x01
 2d6:	0e 94 b8 01 	call	0x370	; 0x370 <MCAL_GPIO_Init>
	
	pin.GPIO_PinNumber = Config->LCD_RSPin;
 2da:	f8 01       	movw	r30, r16
 2dc:	82 81       	ldd	r24, Z+2	; 0x02
 2de:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init(Config->LCD_ControlPort, &pin);
 2e0:	be 01       	movw	r22, r28
 2e2:	6f 5f       	subi	r22, 0xFF	; 255
 2e4:	7f 4f       	sbci	r23, 0xFF	; 255
 2e6:	80 81       	ld	r24, Z
 2e8:	91 81       	ldd	r25, Z+1	; 0x01
 2ea:	0e 94 b8 01 	call	0x370	; 0x370 <MCAL_GPIO_Init>
	
	//pin.GPIO_PinNumber = Config-> RW;
	//MCAL_GPIO_Init(LCD_CTRLPORT, &pin);
	
	pin.GPIO_PinNumber = DB4;
 2ee:	80 e1       	ldi	r24, 0x10	; 16
 2f0:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init(LCD_DATAPORT, &pin);
 2f2:	be 01       	movw	r22, r28
 2f4:	6f 5f       	subi	r22, 0xFF	; 255
 2f6:	7f 4f       	sbci	r23, 0xFF	; 255
 2f8:	83 e3       	ldi	r24, 0x33	; 51
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 b8 01 	call	0x370	; 0x370 <MCAL_GPIO_Init>
	
	pin.GPIO_PinNumber = DB5;
 300:	80 e2       	ldi	r24, 0x20	; 32
 302:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init(LCD_DATAPORT, &pin);
 304:	be 01       	movw	r22, r28
 306:	6f 5f       	subi	r22, 0xFF	; 255
 308:	7f 4f       	sbci	r23, 0xFF	; 255
 30a:	83 e3       	ldi	r24, 0x33	; 51
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 b8 01 	call	0x370	; 0x370 <MCAL_GPIO_Init>
	
	pin.GPIO_PinNumber = DB6;
 312:	80 e4       	ldi	r24, 0x40	; 64
 314:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init(LCD_DATAPORT, &pin);
 316:	be 01       	movw	r22, r28
 318:	6f 5f       	subi	r22, 0xFF	; 255
 31a:	7f 4f       	sbci	r23, 0xFF	; 255
 31c:	83 e3       	ldi	r24, 0x33	; 51
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 b8 01 	call	0x370	; 0x370 <MCAL_GPIO_Init>
	
	pin.GPIO_PinNumber = DB7;
 324:	80 e8       	ldi	r24, 0x80	; 128
 326:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init(LCD_DATAPORT, &pin);
 328:	be 01       	movw	r22, r28
 32a:	6f 5f       	subi	r22, 0xFF	; 255
 32c:	7f 4f       	sbci	r23, 0xFF	; 255
 32e:	83 e3       	ldi	r24, 0x33	; 51
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 b8 01 	call	0x370	; 0x370 <MCAL_GPIO_Init>
	pin.GPIO_PinNumber = DB3;
	MCAL_GPIO_Init(LCD_DATAPORT, &pin);

	#elif (LCD_MODE == LCD_MODE_4BITS)
	
	LCD_sendCommand(Config, FUNC_SET>>4);
 336:	62 e0       	ldi	r22, 0x02	; 2
 338:	c8 01       	movw	r24, r16
 33a:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_sendCommand>
	#endif
	
	
	
	
	LCD_sendCommand(Config, FUNC_SET);
 33e:	68 e2       	ldi	r22, 0x28	; 40
 340:	c8 01       	movw	r24, r16
 342:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_sendCommand>
	LCD_sendCommand(Config, DISPLAY_INIT);
 346:	6e e0       	ldi	r22, 0x0E	; 14
 348:	c8 01       	movw	r24, r16
 34a:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_sendCommand>
	LCD_sendCommand(Config, ENTRY_MODE);
 34e:	66 e0       	ldi	r22, 0x06	; 6
 350:	c8 01       	movw	r24, r16
 352:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_sendCommand>
	LCD_sendCommand(Config, CLEAR);
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	c8 01       	movw	r24, r16
 35a:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_sendCommand>
	
	//_delay_ms(50);
}
 35e:	0f 90       	pop	r0
 360:	0f 90       	pop	r0
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	1f 91       	pop	r17
 368:	0f 91       	pop	r16
 36a:	08 95       	ret

0000036c <HAL_LCD_writeChar>:
	LCD_sendCommand(Config, HOME);
}

void HAL_LCD_writeChar(LCD_Config_t *Config, uint8 data)
{
	LCD_sendData(Config, data);
 36c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <LCD_sendData>

00000370 <MCAL_GPIO_Init>:
* Note				- None.
*/

void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
	switch(PinConfig->GPIO_PinMode)
 370:	fb 01       	movw	r30, r22
 372:	21 81       	ldd	r18, Z+1	; 0x01
 374:	21 30       	cpi	r18, 0x01	; 1
 376:	e1 f0       	breq	.+56     	; 0x3b0 <MCAL_GPIO_Init+0x40>
 378:	90 f0       	brcs	.+36     	; 0x39e <MCAL_GPIO_Init+0x2e>
 37a:	22 30       	cpi	r18, 0x02	; 2
 37c:	79 f4       	brne	.+30     	; 0x39c <MCAL_GPIO_Init+0x2c>
		case GPIO_MODE_OUTPUT:
		GPIOx->DDRx |= PinConfig->GPIO_PinNumber;
		break;
		
		case GPIO_MODE_INPUT_PUR:
		GPIOx->DDRx &= ~(PinConfig->GPIO_PinNumber);
 37e:	fc 01       	movw	r30, r24
 380:	31 81       	ldd	r19, Z+1	; 0x01
 382:	fb 01       	movw	r30, r22
 384:	20 81       	ld	r18, Z
 386:	20 95       	com	r18
 388:	23 23       	and	r18, r19
 38a:	fc 01       	movw	r30, r24
 38c:	21 83       	std	Z+1, r18	; 0x01
		GPIOx->PORTx |= PinConfig->GPIO_PinNumber;
 38e:	22 81       	ldd	r18, Z+2	; 0x02
 390:	fb 01       	movw	r30, r22
 392:	30 81       	ld	r19, Z
 394:	23 2b       	or	r18, r19
 396:	fc 01       	movw	r30, r24
 398:	22 83       	std	Z+2, r18	; 0x02
 39a:	08 95       	ret
 39c:	08 95       	ret
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
	switch(PinConfig->GPIO_PinMode)
	{
		case GPIO_MODE_INPUT:
		GPIOx->DDRx &= ~(PinConfig->GPIO_PinNumber);
 39e:	fc 01       	movw	r30, r24
 3a0:	31 81       	ldd	r19, Z+1	; 0x01
 3a2:	fb 01       	movw	r30, r22
 3a4:	20 81       	ld	r18, Z
 3a6:	20 95       	com	r18
 3a8:	23 23       	and	r18, r19
 3aa:	fc 01       	movw	r30, r24
 3ac:	21 83       	std	Z+1, r18	; 0x01
		break;
 3ae:	08 95       	ret
		
		case GPIO_MODE_OUTPUT:
		GPIOx->DDRx |= PinConfig->GPIO_PinNumber;
 3b0:	fc 01       	movw	r30, r24
 3b2:	21 81       	ldd	r18, Z+1	; 0x01
 3b4:	fb 01       	movw	r30, r22
 3b6:	30 81       	ld	r19, Z
 3b8:	23 2b       	or	r18, r19
 3ba:	fc 01       	movw	r30, r24
 3bc:	21 83       	std	Z+1, r18	; 0x01
		break;
 3be:	08 95       	ret

000003c0 <MCAL_GPIO_writePin>:
* @retval 			- None.
* Note				- None.
*/
void MCAL_GPIO_writePin(GPIO_TypeDef *GPIOx, uint8 PinNumber, uint8 value)
{
	switch(value)
 3c0:	44 23       	and	r20, r20
 3c2:	41 f0       	breq	.+16     	; 0x3d4 <MCAL_GPIO_writePin+0x14>
 3c4:	41 30       	cpi	r20, 0x01	; 1
 3c6:	29 f4       	brne	.+10     	; 0x3d2 <MCAL_GPIO_writePin+0x12>
		case GPIO_STATE_LOW:
		GPIOx->PORTx &= ~(PinNumber);
		break;
		
		case GPIO_STATE_HIGH:
		GPIOx->PORTx |= PinNumber;
 3c8:	fc 01       	movw	r30, r24
 3ca:	22 81       	ldd	r18, Z+2	; 0x02
 3cc:	26 2b       	or	r18, r22
 3ce:	22 83       	std	Z+2, r18	; 0x02
 3d0:	08 95       	ret
 3d2:	08 95       	ret
void MCAL_GPIO_writePin(GPIO_TypeDef *GPIOx, uint8 PinNumber, uint8 value)
{
	switch(value)
	{
		case GPIO_STATE_LOW:
		GPIOx->PORTx &= ~(PinNumber);
 3d4:	fc 01       	movw	r30, r24
 3d6:	22 81       	ldd	r18, Z+2	; 0x02
 3d8:	60 95       	com	r22
 3da:	62 23       	and	r22, r18
 3dc:	62 83       	std	Z+2, r22	; 0x02
		break;
 3de:	08 95       	ret

000003e0 <MCAL_SPI_Init>:
* @param [in] 		- Config: This defines the initialization and configuration for SPI.
* @retval 			- None.
* Note				- None.
*/
void MCAL_SPI_Init(SPI_Config_t *Config)
{
 3e0:	0f 93       	push	r16
 3e2:	1f 93       	push	r17
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	00 d0       	rcall	.+0      	; 0x3ea <MCAL_SPI_Init+0xa>
 3ea:	00 d0       	rcall	.+0      	; 0x3ec <MCAL_SPI_Init+0xc>
 3ec:	cd b7       	in	r28, 0x3d	; 61
 3ee:	de b7       	in	r29, 0x3e	; 62
 3f0:	8c 01       	movw	r16, r24
	uint8 tempConfig = 0;
	tempConfig |= Config->SPI_MasterSlaveSelect;
	tempConfig |= Config->SPI_DataOrder;
 3f2:	dc 01       	movw	r26, r24
 3f4:	11 96       	adiw	r26, 0x01	; 1
 3f6:	8c 91       	ld	r24, X
 3f8:	11 97       	sbiw	r26, 0x01	; 1
 3fa:	9c 91       	ld	r25, X
 3fc:	89 2b       	or	r24, r25
	tempConfig |= Config->SPI_ClockPolarityPhase;
	tempConfig |= (Config->SPI_ClockRate & 0x03);
 3fe:	13 96       	adiw	r26, 0x03	; 3
 400:	9c 91       	ld	r25, X
 402:	13 97       	sbiw	r26, 0x03	; 3
void MCAL_SPI_Init(SPI_Config_t *Config)
{
	uint8 tempConfig = 0;
	tempConfig |= Config->SPI_MasterSlaveSelect;
	tempConfig |= Config->SPI_DataOrder;
	tempConfig |= Config->SPI_ClockPolarityPhase;
 404:	12 96       	adiw	r26, 0x02	; 2
 406:	2c 91       	ld	r18, X
 408:	12 97       	sbiw	r26, 0x02	; 2
 40a:	82 2b       	or	r24, r18
	tempConfig |= (Config->SPI_ClockRate & 0x03);
 40c:	29 2f       	mov	r18, r25
 40e:	23 70       	andi	r18, 0x03	; 3
 410:	82 2b       	or	r24, r18
	tempConfig |= Config->SPI_INT_EN;
 412:	14 96       	adiw	r26, 0x04	; 4
 414:	2c 91       	ld	r18, X
 416:	14 97       	sbiw	r26, 0x04	; 4
 418:	20 64       	ori	r18, 0x40	; 64
	tempConfig |= (1<<6);
 41a:	28 2b       	or	r18, r24
	
	SPIx->SPSR |= (Config->SPI_ClockRate >> 2);
 41c:	e0 91 60 00 	lds	r30, 0x0060
 420:	f0 91 61 00 	lds	r31, 0x0061
 424:	31 81       	ldd	r19, Z+1	; 0x01
 426:	89 2f       	mov	r24, r25
 428:	86 95       	lsr	r24
 42a:	86 95       	lsr	r24
 42c:	83 2b       	or	r24, r19
 42e:	81 83       	std	Z+1, r24	; 0x01

	GPIO_PinConfig_t pinConfig;
	if(Config->SPI_MasterSlaveSelect == SPI_MCU_MODE_MASTER)
 430:	3c 91       	ld	r19, X
 432:	30 31       	cpi	r19, 0x10	; 16
 434:	31 f1       	breq	.+76     	; 0x482 <MCAL_SPI_Init+0xa2>

		pinConfig.GPIO_PinNumber = SS_PIN;
		MCAL_GPIO_Init(SPI_PORT, &pinConfig);				

	}
	else if(Config->SPI_MasterSlaveSelect == SPI_MCU_MODE_SLAVE)
 436:	31 11       	cpse	r19, r1
 438:	11 c0       	rjmp	.+34     	; 0x45c <MCAL_SPI_Init+0x7c>
	{
		pinConfig.GPIO_PinNumber = MISO_PIN;
 43a:	80 e4       	ldi	r24, 0x40	; 64
 43c:	89 83       	std	Y+1, r24	; 0x01
		pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	8a 83       	std	Y+2, r24	; 0x02
		MCAL_GPIO_Init(SPI_PORT, &pinConfig);
 442:	be 01       	movw	r22, r28
 444:	6f 5f       	subi	r22, 0xFF	; 255
 446:	7f 4f       	sbci	r23, 0xFF	; 255
 448:	86 e3       	ldi	r24, 0x36	; 54
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	2c 83       	std	Y+4, r18	; 0x04
 44e:	0e 94 b8 01 	call	0x370	; 0x370 <MCAL_GPIO_Init>
 452:	e0 91 60 00 	lds	r30, 0x0060
 456:	f0 91 61 00 	lds	r31, 0x0061
 45a:	2c 81       	ldd	r18, Y+4	; 0x04
	}
	
	
	gptr2IRQ_CallBack = Config->ptr2IRQ_CallBack;
 45c:	d8 01       	movw	r26, r16
 45e:	15 96       	adiw	r26, 0x05	; 5
 460:	8d 91       	ld	r24, X+
 462:	9c 91       	ld	r25, X
 464:	16 97       	sbiw	r26, 0x06	; 6
 466:	90 93 63 00 	sts	0x0063, r25
 46a:	80 93 62 00 	sts	0x0062, r24

	SPIx->SPCR = tempConfig;
 46e:	20 83       	st	Z, r18
}
 470:	0f 90       	pop	r0
 472:	0f 90       	pop	r0
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	1f 91       	pop	r17
 47e:	0f 91       	pop	r16
 480:	08 95       	ret
	SPIx->SPSR |= (Config->SPI_ClockRate >> 2);

	GPIO_PinConfig_t pinConfig;
	if(Config->SPI_MasterSlaveSelect == SPI_MCU_MODE_MASTER)
	{
		pinConfig.GPIO_PinNumber = MOSI_PIN;
 482:	80 e2       	ldi	r24, 0x20	; 32
 484:	89 83       	std	Y+1, r24	; 0x01
		pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	8a 83       	std	Y+2, r24	; 0x02
		MCAL_GPIO_Init(SPI_PORT, &pinConfig);
 48a:	be 01       	movw	r22, r28
 48c:	6f 5f       	subi	r22, 0xFF	; 255
 48e:	7f 4f       	sbci	r23, 0xFF	; 255
 490:	86 e3       	ldi	r24, 0x36	; 54
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	2c 83       	std	Y+4, r18	; 0x04
 496:	3b 83       	std	Y+3, r19	; 0x03
 498:	0e 94 b8 01 	call	0x370	; 0x370 <MCAL_GPIO_Init>

		pinConfig.GPIO_PinNumber = SCK_PIN;
 49c:	80 e8       	ldi	r24, 0x80	; 128
 49e:	89 83       	std	Y+1, r24	; 0x01
		MCAL_GPIO_Init(SPI_PORT, &pinConfig);
 4a0:	be 01       	movw	r22, r28
 4a2:	6f 5f       	subi	r22, 0xFF	; 255
 4a4:	7f 4f       	sbci	r23, 0xFF	; 255
 4a6:	86 e3       	ldi	r24, 0x36	; 54
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 b8 01 	call	0x370	; 0x370 <MCAL_GPIO_Init>

		pinConfig.GPIO_PinNumber = SS_PIN;
 4ae:	3b 81       	ldd	r19, Y+3	; 0x03
 4b0:	39 83       	std	Y+1, r19	; 0x01
		MCAL_GPIO_Init(SPI_PORT, &pinConfig);				
 4b2:	be 01       	movw	r22, r28
 4b4:	6f 5f       	subi	r22, 0xFF	; 255
 4b6:	7f 4f       	sbci	r23, 0xFF	; 255
 4b8:	86 e3       	ldi	r24, 0x36	; 54
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 b8 01 	call	0x370	; 0x370 <MCAL_GPIO_Init>
 4c0:	e0 91 60 00 	lds	r30, 0x0060
 4c4:	f0 91 61 00 	lds	r31, 0x0061
 4c8:	2c 81       	ldd	r18, Y+4	; 0x04
 4ca:	c8 cf       	rjmp	.-112    	; 0x45c <MCAL_SPI_Init+0x7c>

000004cc <MCAL_SPI_Rx>:
* @param [in] 		- None.
* @retval 			- The data received.
* Note				- None.
*/
uint8 MCAL_SPI_Rx(void)
{
 4cc:	e0 91 60 00 	lds	r30, 0x0060
 4d0:	f0 91 61 00 	lds	r31, 0x0061
	while(!(SPIx->SPSR & (1<<7)));
 4d4:	81 81       	ldd	r24, Z+1	; 0x01
 4d6:	87 ff       	sbrs	r24, 7
 4d8:	fd cf       	rjmp	.-6      	; 0x4d4 <MCAL_SPI_Rx+0x8>
	
	return SPIx->SPDR;
 4da:	82 81       	ldd	r24, Z+2	; 0x02
}
 4dc:	08 95       	ret

000004de <_exit>:
 4de:	f8 94       	cli

000004e0 <__stop_program>:
 4e0:	ff cf       	rjmp	.-2      	; 0x4e0 <__stop_program>
